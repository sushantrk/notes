
install.packages("KernelKnn")
library(KernelKnn)

# Load data and preprocess
data(ionosphere, package = 'KernelKnn')
ionosphere = ionosphere[, -2]
X = scale(ionosphere[, -ncol(ionosphere)])
y = as.numeric(factor(ionosphere[, ncol(ionosphere)]))

# Split the data into training and testing sets
set.seed(123)
spl_train = sample(seq_along(y), round(length(y) * 0.75))
spl_test = setdiff(seq_along(y), spl_train)

# Evaluation metric
acc = function(y_true, preds) {
  out = table(y_true, max.col(preds, ties.method = "random"))
  sum(diag(out)) / sum(out)
}

# KNN with Euclidean distance
preds_TEST = KernelKnn(X[spl_train, ], TEST_data = X[spl_test, ], y[spl_train], k = 5, 
                       method = 'euclidean', regression = FALSE, Levels = unique(y))
head(preds_TEST)

# KNN with Canberra distance and Tricube kernel
preds_TEST_tric = KernelKnn(X[spl_train, ], TEST_data = X[spl_test, ], y[spl_train], k = 10, 
                            method = 'canberra', weights_function = 'tricube', regression = FALSE,
                            Levels = unique(y))
head(preds_TEST_tric)

# Custom normal distribution kernel function
norm_kernel = function(W) {
  W = dnorm(W, mean = 0, sd = 1.0)
  W / rowSums(W)
}

# KNN with Canberra distance and custom kernel
preds_TEST_norm = KernelKnn(X[spl_train, ], TEST_data = X[spl_test, ], y[spl_train], k = 10, 
                            method = 'canberra', weights_function = norm_kernel, regression = FALSE, 
                            Levels = unique(y))
head(preds_TEST_norm)

# Cross-validation with Tricube kernel
fit_cv_pair1 = KernelKnnCV(X, y, k = 10, folds = 5, method = 'canberra', 
                           weights_function = 'tricube', regression = FALSE, 
                           Levels = unique(y), threads = 5)
str(fit_cv_pair1)

# Cross-validation with Epanechnikov kernel
fit_cv_pair2 = KernelKnnCV(X, y, k = 9, folds = 5, method = 'canberra',
                           weights_function = 'epanechnikov', regression = FALSE,
                           Levels = unique(y), threads = 5)
str(fit_cv_pair2)

# Calculate and print accuracy for both parameter sets
calc_acc = function(fit_cv) {
  unlist(lapply(1:length(fit_cv$preds), function(x) acc(y[fit_cv$folds[[x]]], fit_cv$preds[[x]])))
}

acc_pair1 = calc_acc(fit_cv_pair1)
cat('Accuracy for params_pair1 is:', mean(acc_pair1), '\n')

acc_pair2 = calc_acc(fit_cv_pair2)
cat('Accuracy for params_pair2 is:', mean(acc_pair2), '\n')
